import { useEffect, useMemo, useState } from "react";
import { accountApi } from "../../../api/AccountApi";
import "../../../styles/NotificationDetail.css";

/* ===== Helpers ===== */
function fmtDate(dt) {
  if (!dt) return "";
  try {
    const d = new Date(dt);
    const pad = (n) => String(n).padStart(2, "0");
    return `${pad(d.getDate())}/${pad(d.getMonth() + 1)}/${d.getFullYear()} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
  } catch {
    return String(dt);
  }
}

const TYPE_LABELS = { THAY_DOI_LICH: "Thay ƒë·ªïi l·ªãch", HUY_LICH: "H·ªßy l·ªãch" };
const toTypeLabel = (raw) => TYPE_LABELS[raw] || (raw || "");

/* L·∫•y userId ƒë√∫ng theo schema b·∫°n ƒëang c√≥ */
const extractUserId = (rec) =>
  rec?.userId ?? rec?.user?.id ?? rec?.accountId ?? null;

/* N·∫øu BE c√≥ nh·ªìi s·∫µn t√™n/username v√†o record, d√πng l√†m fallback cu·ªëi c√πng */
const extractInlineName = (rec) =>
  rec?.user?.username ?? rec?.username ?? rec?.user?.fullName ?? rec?.fullName ?? rec?.name ?? null;

export default function NotificationDetail({ open, data, onClose }) {
  // Kh√≥a scroll + ESC ƒë·ªÉ ƒë√≥ng
  useEffect(() => {
    if (!open) return;
    const onKey = (e) => { if (e.key === "Escape") onClose?.(); };
    document.addEventListener("keydown", onKey);
    const prevOverflow = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => {
      document.removeEventListener("keydown", onKey);
      document.body.style.overflow = prevOverflow;
    };
  }, [open, onClose]);

  const recipients = useMemo(
    () => (Array.isArray(data?.recipients) ? data.recipients : []),
    [data?.recipients]
  );

  const unread = useMemo(
    () => recipients.filter((r) => !r.isRead).length,
    [recipients]
  );

  // Cache account theo userId ƒë·ªÉ tr√°nh g·ªçi l·∫°i khi re-render
  const [accountById, setAccountById] = useState({}); // { [userId]: { id, username, ... } }
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!open) return;

    const ids = [
      ...new Set(
        recipients
          .map(extractUserId)
          .filter((id) => id !== null && id !== undefined && id !== "")
      ),
    ];

    if (ids.length === 0) {
      setAccountById({});
      return;
    }

    // L·ªçc c√°c id ch∆∞a c√≥ trong cache
    const needFetch = ids.filter((id) => !accountById[id]);
    if (needFetch.length === 0) return;

    let cancelled = false;
    setLoading(true);
    console.log("üîé Fetch accounts by ids:", needFetch);

    (async () => {
      try {
        const results = await Promise.all(
          needFetch.map(async (uid) => {
            try {
              const acc = await accountApi.getById(uid); // KH√îNG d√πng search ƒë·ªÉ tr√°nh 403
              return [uid, acc];
            } catch (e) {
              console.warn("‚ö†Ô∏è accountApi.getById failed:", uid, e?.response?.status || e);
              return [uid, null];
            }
          })
        );

        if (!cancelled) {
          setAccountById((prev) => {
            const next = { ...prev };
            results.forEach(([uid, acc]) => {
              if (acc) next[uid] = acc;
              // n·∫øu fail, kh√¥ng set ƒë·ªÉ l·∫ßn sau c√≥ th·ªÉ th·ª≠ l·∫°i (ho·∫∑c gi·ªØ null t√πy √Ω)
            });
            return next;
          });
        }
      } finally {
        if (!cancelled) setLoading(false);
      }
    })();

    return () => { cancelled = true; };
    // accountById l√† cache; kh√¥ng mu·ªën refetch tr·ª´ khi recipients thay ƒë·ªïi
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open, recipients]);

  // Hi·ªÉn th·ªã username ∆∞u ti√™n: Account.username ‚Üí inline fallback ‚Üí "User #id"
  const displayUser = (rec) => {
    const uid = extractUserId(rec);
    if (uid == null) return "‚Äî";

    const acc = accountById[uid];
    if (acc?.username) {
      console.log("‚û°Ô∏è Display username from Account", uid, ":", acc.username);
      return acc.username;
    }

    const inline = extractInlineName(rec);
    if (inline) {
      console.log("‚û°Ô∏è Display inline fallback for", uid, ":", inline);
      return inline;
    }

    console.log("‚û°Ô∏è Display fallback for", uid);
    return `User #${uid}`;
  };

  if (!open) return null;

  return (
    <div
      className="noti-modal-backdrop"
      role="dialog"
      aria-modal="true"
      aria-label="Chi ti·∫øt th√¥ng b√°o"
      onMouseDown={(e) => { if (e.target === e.currentTarget) onClose?.(); }}
    >
      <div className="noti-modal" onMouseDown={(e) => e.stopPropagation()}>
        <div className="noti-modal-header">
          <div>CHI TI·∫æT TH√îNG B√ÅO</div>
          <button className="noti-close" onClick={onClose} aria-label="ƒê√≥ng">√ó</button>
        </div>

        <div className="noti-modal-body">
          {!data ? (
            <div style={{ padding: 16 }}>Kh√¥ng c√≥ d·ªØ li·ªáu</div>
          ) : (
            <>
              <div className="noti-grid2">
                <div>
                  <label className="noti-label">Ti√™u ƒë·ªÅ:</label>
                  <input className="noti-input" value={data.title || ""} readOnly />
                </div>
                <div>
                  <label className="noti-label">Lo·∫°i:</label>
                  <input className="noti-input" value={toTypeLabel(data.type)} readOnly />
                </div>
                <div>
                  <label className="noti-label">Ng√†y t·∫°o:</label>
                  <input className="noti-input" value={fmtDate(data.createdAt)} readOnly />
                </div>
                <div>
                  <label className="noti-label">C·∫≠p nh·∫≠t:</label>
                  <input className="noti-input" value={fmtDate(data.updatedAt)} readOnly />
                </div>
              </div>

              <div style={{ marginTop: 16 }}>
                <div className="noti-subtitle">
                  Danh s√°ch ng∆∞·ªùi nh·∫≠n
                  {recipients.length > 0 && (
                    <span style={{ marginLeft: 8, color: "#6b7280", fontWeight: 400 }}>
                      (T·ªïng {recipients.length} ‚Äî {recipients.length - unread} ƒë√£ ƒë·ªçc{loading ? ", ƒëang t·∫£i‚Ä¶" : ""})
                    </span>
                  )}
                </div>
                <table className="noti-table">
                  <thead>
                    <tr>
                      <th>STT</th>
                      <th>Username</th>
                      <th>Tr·∫°ng th√°i</th>
                      <th>Th·ªùi ƒëi·ªÉm ƒë·ªçc</th>
                    </tr>
                  </thead>
                  <tbody>
                    {recipients.length === 0 ? (
                      <tr><td colSpan={4} style={{ padding: 12 }}>Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi nh·∫≠n</td></tr>
                    ) : (
                      recipients.map((r, i) => (
                        <tr key={r.id ?? extractUserId(r) ?? i}>
                          <td>{i + 1}</td>
                          <td>{displayUser(r)}</td>
                          <td>{r.isRead ? "ƒê√£ ƒë·ªçc" : "Ch∆∞a ƒë·ªçc"}</td>
                          <td>{r.readAt ? fmtDate(r.readAt) : "‚Äî"}</td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </>
          )}
        </div>

        <div className="noti-modal-actions">
          <button className="noti-btn ghost" onClick={onClose}>ƒê√≥ng</button>
        </div>
      </div>
    </div>
  );
}
