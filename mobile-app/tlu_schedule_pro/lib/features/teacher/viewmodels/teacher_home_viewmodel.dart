// lib/features/teacher/viewmodels/teacher_home_viewmodel.dart
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import '../models/schedule_model.dart';
import '../services/teacher_service.dart';
import '../services/teacher_schedule_service.dart';
import '../../auth/services/auth_service.dart';

class TeacherHomeViewModel extends ChangeNotifier {
  // Service l·∫•y d·ªØ li·ªáu t·ªïng quan trang Home
  final _service = TeacherService();

  // Service thao t√°c l·ªãch d·∫°y (attendance), t·ª± g·∫Øn Authorization t·ª´ SharedPreferences
  final TeacherScheduleService _scheduleService = TeacherScheduleService(
    authHeaders: () async {
      final t = await AuthService.getToken(); // l·∫•y token ƒë√£ l∆∞u khi login
      if (kDebugMode) {
        debugPrint(
          'üîë Using token (len=${t?.length ?? 0}): '
              '${t == null ? "null" : t.substring(0, t.length > 12 ? 12 : t.length)}...',
        );
      }
      return t == null ? <String, String>{} : {'Authorization': 'Bearer $t'};
    },
  );

  // ----------------- State -----------------
  bool loading = false;
  String? error;

  int? teacherId; // id gi·∫£ng vi√™n
  String teacherName = '';
  String faculty = '';

  int periodsToday = 0;
  int periodsThisWeek = 0;
  int percentCompleted = 0; // n·∫øu backend c√≥ tr·∫£ % t·ªïng, v·∫´n gi·ªØ ƒë·ªÉ hi·ªÉn th·ªã

  List<ScheduleModel> todaySchedules = const [];

  // ----------------- Getters th·ªëng k√™ h√¥m nay -----------------
  /// T·ªïng s·ªë bu·ªïi (item) trong h√¥m nay tr√™n Home
  int get totalTodaySessions => todaySchedules.length;

  /// S·ªë bu·ªïi ƒë√£ ho√†n th√†nh trong h√¥m nay (tr·∫°ng th√°i done)
  int get completedTodaySessions =>
      todaySchedules.where((s) => s.status == ScheduleStatus.done).length;

  /// % ho√†n th√†nh trong h√¥m nay (t√≠nh local theo danh s√°ch todaySchedules)
  int get percentTodayCompleted => totalTodaySessions == 0
      ? 0
      : ((completedTodaySessions * 100) / totalTodaySessions).round();

  // ----------------- Actions -----------------
  Future<void> load() async {
    loading = true;
    error = null;
    notifyListeners();

    try {
      final data = await _service.fetchHomeData();

      // L∆∞u info
      teacherId = data.teacher.id;
      teacherName = data.teacher.name;
      faculty = data.teacher.faculty;

      periodsToday = data.periodsToday;
      periodsThisWeek = data.periodsThisWeek;
      percentCompleted = data.percentCompleted; // tu·ª≥ backend, c√≥ th·ªÉ l√† % tu·∫ßn/th√°ng

      // Danh s√°ch l·ªãch h√¥m nay (d√πng ƒë·ªÉ hi·ªÉn th·ªã + ƒë·∫øm)
      todaySchedules = data.todaySchedules;
    } catch (e) {
      error = e.toString();
    } finally {
      loading = false;
      notifyListeners();
    }
  }

  /// ƒê√°nh d·∫•u "Ho√†n th√†nh" cho 1 l·ªãch d·∫°y (detail)
  Future<void> markDone(ScheduleModel item) async {
    // B·∫£o v·ªá: c·∫ßn c√≥ id chi ti·∫øt l·ªãch
    if (item.id == 0) {
      throw Exception(
        'Thi·∫øu schedule detail id (id=0). H√£y ƒë·∫£m b·∫£o map ƒë√∫ng "detail.id" v√†o ScheduleModel.id.',
      );
    }

    // T√¨m v·ªã tr√≠ item trong danh s√°ch
    final idx = todaySchedules.indexWhere((s) => s.id == item.id);
    ScheduleModel? prev;

    // 1) Optimistic update ƒë·ªÉ UI ph·∫£n h·ªìi t·ª©c th√¨
    if (idx != -1) {
      prev = todaySchedules[idx];
      final updated = prev.copyWith(status: ScheduleStatus.done);
      final clone = [...todaySchedules];
      clone[idx] = updated;
      todaySchedules = clone;
      notifyListeners();
    }

    try {
      // 2) G·ªçi API attendance
      final res = await _scheduleService.markAsDone(item.id);

      // 3) N·∫øu backend tr·∫£ status ‚Üí map l·∫°i cho ch·∫Øc
      final fromApi = statusFromApi(res['status'] as String?);
      if (idx != -1 && fromApi != ScheduleStatus.unknown) {
        final clone = [...todaySchedules];
        clone[idx] = (prev ?? item).copyWith(status: fromApi);
        todaySchedules = clone;
        notifyListeners();
      }

      // 4) Reload to√†n b·ªô ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi server (n·∫øu kh√¥ng mu·ªën reload th√¨ b·ªè d√≤ng n√†y)
      await load();
    } catch (e) {
      // L·ªói ‚Üí rollback v·ªÅ tr∆∞·ªõc ƒë√≥ n·∫øu ƒë√£ optimistic
      if (idx != -1 && prev != null) {
        final clone = [...todaySchedules];
        clone[idx] = prev;
        todaySchedules = clone;
        notifyListeners();
      }
      // N√©m l·ªói ra cho UI hi·ªÉn th·ªã dialog/toast
      throw Exception('C·∫≠p nh·∫≠t th·∫•t b·∫°i: $e');
    }
  }

  /// (Tu·ª≥ ch·ªçn) C·∫≠p nh·∫≠t tr·∫°ng th√°i local 1 item theo id ‚Äî h·ªØu √≠ch khi mu·ªën ƒë·ªìng b·ªô nhanh v·ªõi tab kh√°c.
  void applyStatusLocal(int id, ScheduleStatus status) {
    final i = todaySchedules.indexWhere((e) => e.id == id);
    if (i != -1) {
      final clone = [...todaySchedules];
      clone[i] = clone[i].copyWith(status: status);
      todaySchedules = clone;
      notifyListeners();
    }
  }
}
